{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"mt-8\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"text-gray-600\"\n}, \"POST Contractor Key Pickup\", -1);\n\nconst _hoisted_3 = {\n  id: \"pickupForm\"\n};\nconst _hoisted_4 = {\n  class: \"form-row\"\n};\nconst _hoisted_5 = {\n  class: \"mt-4\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"purpose\"\n}, \"Purpose: \", -1);\n\nconst _hoisted_7 = {\n  class: \"mt-4\"\n};\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"status\"\n}, \"Status: \", -1);\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"returned\"\n}, \"Returned\", -1);\n\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"unreturned\"\n}, \"Unreturned\", -1);\n\nconst _hoisted_11 = [_hoisted_9, _hoisted_10];\nconst _hoisted_12 = {\n  class: \"form-row\"\n};\nconst _hoisted_13 = {\n  class: \"mt-4\"\n};\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"keyinfo_id\"\n}, \"Keyinfo ID: \", -1);\n\nconst _hoisted_15 = {\n  class: \"form-row\"\n};\nconst _hoisted_16 = {\n  class: \"mt-4\"\n};\n\nconst _hoisted_17 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"qrScanner\"\n}, \"QR Code Scanner: \", -1);\n\nconst _hoisted_18 = /*#__PURE__*/_createTextVNode(\"   \");\n\nconst _hoisted_19 = /*#__PURE__*/_createTextVNode(\"   \");\n\nconst _hoisted_20 = /*#__PURE__*/_createTextVNode(\"   \");\n\nconst _hoisted_21 = {\n  class: \"form-row\"\n};\nconst _hoisted_22 = {\n  class: \"mt-6\"\n};\n\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"img\", {\n  id: \"capturedImage\",\n  src: \"\",\n  alt: \"Captured Image\",\n  style: {\n    \"max-width\": \"350px\",\n    \"display\": \"none\"\n  }\n}, null, -1);\n\nconst _hoisted_24 = /*#__PURE__*/_createElementVNode(\"a\", {\n  id: \"downloadImageLink\",\n  class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n  style: {\n    \"display\": \"none\"\n  },\n  download: \"pickup_image.jpeg\"\n}, \"Download Image\", -1);\n\nconst _hoisted_25 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\n\nconst _hoisted_26 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"file\",\n  class: \"px-2 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n  id: \"pickup_photo_path\",\n  name: \"pickup_photo_path\"\n}, null, -1);\n\nimport { ref } from 'vue';\nimport Breadcrumb from '../partials/Breadcrumb.vue';\nimport { onMounted, onBeforeUnmount } from 'vue';\nimport jsQR from 'jsqr';\nexport default {\n  setup(__props) {\n    const purpose = ref('');\n    const status = ref('returned');\n    const keyinfo_id = ref('');\n    const pickup_photo_path_upload = ref('');\n    const video = ref(null);\n    const activeCamera = ref('environment');\n    let scannerInterval;\n    let scanning = false; /// Function to set up video stream\n\n    const setupVideo = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: activeCamera.value\n          }\n        });\n        video.value.srcObject = stream;\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    }; // Lifecycle hook to start the video stream when the component is mounted\n\n\n    onMounted(() => {\n      setupVideo();\n    }); // Lifecycle hook to clean up when the component is unmounted\n\n    onBeforeUnmount(() => {\n      if (video.value.srcObject) {\n        const tracks = video.value.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    }); // Function to switch between front and back cameras\n\n    const switchCamera = () => {\n      if (activeCamera.value === 'environment') {\n        activeCamera.value = 'user'; // Switch to the front camera\n      } else {\n        activeCamera.value = 'environment'; // Switch to the back camera\n      }\n\n      setupVideo();\n    };\n\n    const startScanner = () => {\n      scanning = true;\n      scannerInterval = setInterval(scanQRCode, 1000);\n    };\n\n    const stopScanner = () => {\n      scanning = false;\n      clearInterval(scannerInterval);\n    };\n\n    const captureImage = () => {\n      if (scanning) {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.value.videoWidth;\n        canvas.height = video.value.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(function (blob) {\n          if (blob) {\n            const imageUrl = URL.createObjectURL(blob);\n            const capturedImage = document.getElementById('capturedImage');\n            capturedImage.src = imageUrl;\n            capturedImage.style.display = 'block'; // Use .value to update the ref\n\n            pickup_photo_path_upload.value = imageUrl;\n            const downloadImageLink = document.getElementById('downloadImageLink');\n            downloadImageLink.href = imageUrl;\n            downloadImageLink.style.display = 'block';\n            const link = document.createElement('a');\n            link.href = imageUrl;\n            link.download = 'pickup_image.jpeg';\n            link.click();\n            const uploadInput = document.createElement('input');\n            uploadInput.type = 'file';\n            uploadInput.value = imageUrl;\n            uploadInput.name = 'pickup_photo_path_upload';\n            uploadInput.style.display = 'none'; // Append the uploadInput to the appropriate form element\n\n            document.getElementById('pickupForm').appendChild(uploadInput);\n          }\n        }, 'image/jpeg');\n      }\n    };\n\n    const submitForm = () => {\n      const url = 'https://www.prototypeapp.online/api/contractors/2/keypickups';\n      const headers = {\n        'Authorization': 'Bearer 17|jnWPdWo8JoCK9EJZc2fLp3rmYYRBUtyLIyt301s6',\n        'Accept': 'application/json'\n      };\n      const formData = new FormData(document.getElementById('pickupForm'));\n      fetch(url, {\n        method: 'POST',\n        headers,\n        body: formData\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n\n    const scanQRCode = () => {\n      if (scanning) {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.value.videoWidth;\n        canvas.height = video.value.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height); // Make sure to import 'jsQR' library\n\n        const code = jsQR(imageData.data, imageData.width, imageData.height);\n\n        if (code) {\n          keyinfo_id.value = code.data;\n        }\n      }\n    };\n\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(Breadcrumb, {\n        breadcrumb: \"PostContractorKeypickups\"\n      }), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n        type: \"text\",\n        class: \"px-4 py-2 border rounded-md\",\n        id: \"purpose\",\n        name: \"purpose\",\n        required: \"\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => purpose.value = $event)\n      }, null, 512), [[_vModelText, purpose.value]])]), _createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _withDirectives(_createElementVNode(\"select\", {\n        class: \"px-4 py-2 border rounded-md\",\n        id: \"status\",\n        name: \"status\",\n        required: \"\",\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => status.value = $event)\n      }, _hoisted_11, 512), [[_vModelSelect, status.value]])])]), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_hoisted_14, _withDirectives(_createElementVNode(\"input\", {\n        type: \"text\",\n        class: \"px-4 py-2 border rounded-md\",\n        id: \"keyinfo_id\",\n        name: \"keyinfo_id\",\n        required: \"\",\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => keyinfo_id.value = $event)\n      }, null, 512), [[_vModelText, keyinfo_id.value]])])]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, [_hoisted_17, _createElementVNode(\"video\", {\n        ref_key: \"video\",\n        ref: video,\n        autoplay: \"\",\n        playsinline: \"\",\n        style: {\n          \"max-width\": \"350px\"\n        }\n      }, null, 512)])]), _createElementVNode(\"div\", {\n        class: \"form-row\"\n      }, [_createElementVNode(\"div\", {\n        class: \"mt-6\"\n      }, [_createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n        onClick: startScanner\n      }, \" Start Scanner \"), _hoisted_18, _createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n        onClick: stopScanner\n      }, \" Stop Scanner \"), _hoisted_19, _createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n        onClick: captureImage\n      }, \" Capture Image \"), _hoisted_20, _createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n        onClick: switchCamera\n      }, \" Switch Camera \")])]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_hoisted_23, _withDirectives(_createElementVNode(\"input\", {\n        type: \"hidden\",\n        id: \"pickup_photo_path_upload\",\n        name: \"pickup_photo_path_upload\",\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => pickup_photo_path_upload.value = $event)\n      }, null, 512), [[_vModelText, pickup_photo_path_upload.value]]), _hoisted_24, _hoisted_25, _hoisted_26]), _createElementVNode(\"div\", {\n        class: \"mt-4\"\n      }, [_createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\",\n        onClick: submitForm\n      }, \" Submit \")])])])])]);\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","Breadcrumb","onMounted","onBeforeUnmount","jsQR","purpose","status","keyinfo_id","pickup_photo_path_upload","video","activeCamera","scannerInterval","scanning","setupVideo","stream","navigator","mediaDevices","getUserMedia","facingMode","value","srcObject","error","console","tracks","getTracks","forEach","track","stop","switchCamera","startScanner","setInterval","scanQRCode","stopScanner","clearInterval","captureImage","canvas","document","createElement","width","videoWidth","height","videoHeight","context","getContext","drawImage","toBlob","blob","imageUrl","URL","createObjectURL","capturedImage","getElementById","src","style","display","downloadImageLink","href","link","download","click","uploadInput","type","name","appendChild","submitForm","url","headers","formData","FormData","fetch","method","body","then","response","json","data","log","catch","imageData","getImageData","code"],"sources":["C:/xampp/htdocs/keyman-vue/keyman-vue/src/views/PostContractorKeypickup.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Breadcrumb -->\r\n      <Breadcrumb breadcrumb=\"PostContractorKeypickups\" />\r\n\r\n      <div class=\"mt-8\">\r\n        <h4 class=\"text-gray-600\">POST Contractor Key Pickup</h4>\r\n        <form id=\"pickupForm\">\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"purpose\">Purpose: </label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"px-4 py-2 border rounded-md\"\r\n                id=\"purpose\"\r\n                name=\"purpose\"\r\n                required\r\n                v-model=\"purpose\"\r\n              />\r\n            </div>\r\n            <div class=\"mt-4\">\r\n              <label for=\"status\">Status: </label>\r\n              <select class=\"px-4 py-2 border rounded-md\" id=\"status\" name=\"status\" required v-model=\"status\">\r\n                <option value=\"returned\">Returned</option>\r\n                <option value=\"unreturned\">Unreturned</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"keyinfo_id\">Keyinfo ID: </label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"px-4 py-2 border rounded-md\"\r\n                id=\"keyinfo_id\"\r\n                name=\"keyinfo_id\"\r\n                required\r\n                v-model=\"keyinfo_id\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"qrScanner\">QR Code Scanner: </label>\r\n              <!-- Properly bind the video element -->\r\n              <video ref=\"video\" autoplay playsinline style=\"max-width: 350px;\"></video>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-6\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\"\r\n                @click=\"startScanner\"\r\n              >\r\n                Start Scanner\r\n              </button>\r\n              &nbsp;\r\n              <button\r\n                type=\"button\"\r\n                class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\"\r\n                @click=\"stopScanner\"\r\n              >\r\n                Stop Scanner\r\n              </button>\r\n              &nbsp;\r\n              <button\r\n                type=\"button\"\r\n                class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\"\r\n                @click=\"captureImage\"\r\n              >\r\n                Capture Image\r\n              </button>\r\n              &nbsp;\r\n              <button\r\n                type=\"button\"\r\n                class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\"\r\n                @click=\"switchCamera\"\r\n              >\r\n                Switch Camera\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-6\">\r\n              <!-- Image preview -->\r\n              <img id=\"capturedImage\" src=\"\" alt=\"Captured Image\" style=\"max-width: 100%; max-width: 350px; display: none;\" />\r\n              <!-- Include a hidden input field to store the captured image data URL -->\r\n              <input type=\"hidden\" id=\"pickup_photo_path_upload\" name=\"pickup_photo_path_upload\" v-model=\"pickup_photo_path_upload\" />\r\n              <!-- Download link for the captured image -->\r\n              <a id=\"downloadImageLink\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" style=\"display: none;\" download=\"pickup_image.jpeg\">Download Image</a>\r\n              <br />\r\n              <!-- Include a hidden input field to store the captured image data URL -->\r\n              <input type=\"file\" class=\"px-2 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" id=\"pickup_photo_path\" name=\"pickup_photo_path\" />\r\n            </div>\r\n            <div class=\"mt-4\">\r\n              <button\r\n                type=\"button\"\r\n                class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\"\r\n                @click=\"submitForm\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n</template>\r\n  \r\n  <script setup>\r\n  import { ref } from 'vue';\r\n  import Breadcrumb from '../partials/Breadcrumb.vue'\r\n  import {onMounted, onBeforeUnmount } from 'vue';\r\n  import jsQR from 'jsqr';\r\n  \r\n  const purpose = ref('');\r\n  const status = ref('returned');\r\n  const keyinfo_id = ref('');\r\n  const pickup_photo_path_upload = ref('');\r\n  const video = ref(null);\r\n  const activeCamera = ref('environment');\r\n  let scannerInterval;\r\n  let scanning = false;\r\n  \r\n    /// Function to set up video stream\r\n  const setupVideo = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: activeCamera.value } });\r\n      video.value.srcObject = stream;\r\n    } catch (error) {\r\n      console.error('Error accessing camera:', error);\r\n    }\r\n  };\r\n\r\n  // Lifecycle hook to start the video stream when the component is mounted\r\n  onMounted(() => {\r\n    setupVideo();\r\n  });\r\n\r\n  // Lifecycle hook to clean up when the component is unmounted\r\n  onBeforeUnmount(() => {\r\n    if (video.value.srcObject) {\r\n      const tracks = video.value.srcObject.getTracks();\r\n      tracks.forEach((track) => track.stop());\r\n    }\r\n  });\r\n\r\n  // Function to switch between front and back cameras\r\n  const switchCamera = () => {\r\n    if (activeCamera.value === 'environment') {\r\n      activeCamera.value = 'user'; // Switch to the front camera\r\n    } else {\r\n      activeCamera.value = 'environment'; // Switch to the back camera\r\n    }\r\n    setupVideo();\r\n  };\r\n  \r\n  const startScanner = () => {\r\n    scanning = true;\r\n    scannerInterval = setInterval(scanQRCode, 1000);\r\n  };\r\n  \r\n  const stopScanner = () => {\r\n    scanning = false;\r\n    clearInterval(scannerInterval);\r\n  };\r\n  \r\n  const captureImage = () => {\r\n    if (scanning) {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = video.value.videoWidth;\r\n      canvas.height = video.value.videoHeight;\r\n      const context = canvas.getContext('2d');\r\n      context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n  \r\n      canvas.toBlob(function (blob) {\r\n        if (blob) {\r\n          const imageUrl = URL.createObjectURL(blob);\r\n  \r\n          const capturedImage = document.getElementById('capturedImage');\r\n          capturedImage.src = imageUrl;\r\n          capturedImage.style.display = 'block';\r\n  \r\n          // Use .value to update the ref\r\n          pickup_photo_path_upload.value = imageUrl;\r\n  \r\n          const downloadImageLink = document.getElementById('downloadImageLink');\r\n          downloadImageLink.href = imageUrl;\r\n          downloadImageLink.style.display = 'block';\r\n  \r\n          const link = document.createElement('a');\r\n          link.href = imageUrl;\r\n          link.download = 'pickup_image.jpeg';\r\n          link.click();\r\n  \r\n          const uploadInput = document.createElement('input');\r\n          uploadInput.type = 'file';\r\n          uploadInput.value = imageUrl;\r\n          uploadInput.name = 'pickup_photo_path_upload';\r\n          uploadInput.style.display = 'none';\r\n          // Append the uploadInput to the appropriate form element\r\n          document.getElementById('pickupForm').appendChild(uploadInput);\r\n        }\r\n      }, 'image/jpeg');\r\n    }\r\n  };\r\n  \r\n  const submitForm = () => {\r\n    const url = 'https://www.prototypeapp.online/api/contractors/2/keypickups';\r\n    const headers = {\r\n      'Authorization': 'Bearer 17|jnWPdWo8JoCK9EJZc2fLp3rmYYRBUtyLIyt301s6',\r\n      'Accept': 'application/json',\r\n    };\r\n  \r\n    const formData = new FormData(document.getElementById('pickupForm'));\r\n  \r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers,\r\n      body: formData,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  \r\n  const scanQRCode = () => {\r\n    if (scanning) {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = video.value.videoWidth;\r\n      canvas.height = video.value.videoHeight;\r\n      const context = canvas.getContext('2d');\r\n      context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n  \r\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n  \r\n      // Make sure to import 'jsQR' library\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n  \r\n      if (code) {\r\n        keyinfo_id.value = code.data;\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "]},"metadata":{},"sourceType":"module"}