{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount } from 'vue';\nimport jsQR from 'jsqr';\nexport default {\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const purpose = ref('');\n    const status = ref('returned');\n    const keyinfo_id = ref('');\n    const pickup_photo_path_upload = ref('');\n    const video = ref(null);\n    let scannerInterval;\n    let scanning = false;\n\n    const setupVideo = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        video.value.srcObject = stream; // Listen for the \"loadedmetadata\" event\n\n        video.value.addEventListener('loadedmetadata', () => {\n          // After metadata is loaded, you can access the video properties\n          startScanner(); // You can start the scanner here\n        });\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n\n    onMounted(() => {\n      setupVideo();\n    });\n    onBeforeUnmount(() => {\n      if (video.value.srcObject) {\n        const tracks = video.value.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    });\n\n    const startScanner = () => {\n      scanning = true;\n      scannerInterval = setInterval(scanQRCode, 1000);\n    };\n\n    const stopScanner = () => {\n      scanning = false;\n      clearInterval(scannerInterval);\n    };\n\n    const captureImage = () => {\n      if (scanning) {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.value.videoWidth;\n        canvas.height = video.value.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(video.value, 0, 0, canvas.width, canvas.height); // ... (rest of your captureImage logic)\n      }\n    };\n\n    const submitForm = () => {// ... (rest of your submitForm logic)\n    };\n\n    const scanQRCode = () => {\n      if (scanning && video.value) {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.value.videoWidth;\n        canvas.height = video.value.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height);\n\n        if (code) {\n          keyinfo_id.value = code.data;\n        }\n      }\n    };\n\n    const __returned__ = {\n      purpose,\n      status,\n      keyinfo_id,\n      pickup_photo_path_upload,\n      video,\n      scannerInterval,\n      scanning,\n      setupVideo,\n      startScanner,\n      stopScanner,\n      captureImage,\n      submitForm,\n      scanQRCode,\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      jsQR\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","onMounted","onBeforeUnmount","jsQR","purpose","status","keyinfo_id","pickup_photo_path_upload","video","scannerInterval","scanning","setupVideo","stream","navigator","mediaDevices","getUserMedia","value","srcObject","addEventListener","startScanner","error","console","tracks","getTracks","forEach","track","stop","setInterval","scanQRCode","stopScanner","clearInterval","captureImage","canvas","document","createElement","width","videoWidth","height","videoHeight","context","getContext","drawImage","submitForm","imageData","getImageData","code","data"],"sources":["C:/xampp/htdocs/keyman-vue/src/views/PostContractorKeypickup.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <!-- Breadcrumb -->\r\n      <Breadcrumb breadcrumb=\"PostContractorKeypickups\" />\r\n  \r\n      <div class=\"mt-8\">\r\n        <h4 class=\"text-gray-600\">POST Contractor Key Pickup</h4>\r\n        <form id=\"pickupForm\">\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"purpose\">Purpose: </label>\r\n              <input type=\"text\" class=\"px-4 py-2 border rounded-md\" id=\"purpose\" name=\"purpose\" required v-model=\"purpose\" />\r\n            </div>\r\n            <div class=\"mt-4\">\r\n              <label for=\"status\">Status: </label>\r\n              <select class=\"px-4 py-2 border rounded-md\" id=\"status\" name=\"status\" required v-model=\"status\">\r\n                <option value=\"returned\">Returned</option>\r\n                <option value=\"unreturned\">Unreturned</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"keyinfo_id\">Keyinfo ID: </label>\r\n              <input type=\"text\" class=\"px-4 py-2 border rounded-md\" id=\"keyinfo_id\" name=\"keyinfo_id\" required v-model=\"keyinfo_id\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-4\">\r\n              <label for=\"qrScanner\">QR Code Scanner: </label>\r\n              <!-- Properly bind the video element -->\r\n              <video ref=\"video\" autoplay playsinline></video>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-6\">\r\n              <button type=\"button\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" @click=\"startScanner\">Start Scanner</button> &nbsp;\r\n              <button type=\"button\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" @click=\"stopScanner\">Stop Scanner</button> &nbsp;\r\n              <button type=\"button\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" @click=\"captureImage\">Capture Image</button> &nbsp;\r\n            </div>\r\n          </div>\r\n          <div class=\"form-row\">\r\n            <div class=\"mt-6\">\r\n              <!-- Image preview -->\r\n              <img id=\"capturedImage\" src=\"\" alt=\"Captured Image\" style=\"max-width: 100%; max-width: 350px; display: none;\" />\r\n              <!-- Include a hidden input field to store the captured image data URL -->\r\n              <input type=\"hidden\" id=\"pickup_photo_path_upload\" name=\"pickup_photo_path_upload\" v-model=\"pickup_photo_path_upload\" />\r\n              <!-- Download link for the captured image -->\r\n              <a id=\"downloadImageLink\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" style=\"display: none;\" download=\"pickup_image.jpeg\">Download Image</a><br />\r\n              <!-- Include a hidden input field to store the captured image data URL -->\r\n              <input type=\"file\" id=\"pickup_photo_path\" name=\"pickup_photo_path\" />\r\n            </div>\r\n            <div class=\"mt-4\">\r\n              <button type=\"button\" class=\"px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500\" @click=\"submitForm\">Submit</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport jsQR from 'jsqr';\r\n\r\nconst purpose = ref('');\r\nconst status = ref('returned');\r\nconst keyinfo_id = ref('');\r\nconst pickup_photo_path_upload = ref('');\r\nconst video = ref(null);\r\nlet scannerInterval;\r\nlet scanning = false;\r\n\r\nconst setupVideo = async () => {\r\n  try {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n    video.value.srcObject = stream;\r\n\r\n    // Listen for the \"loadedmetadata\" event\r\n    video.value.addEventListener('loadedmetadata', () => {\r\n      // After metadata is loaded, you can access the video properties\r\n      startScanner(); // You can start the scanner here\r\n    });\r\n  } catch (error) {\r\n    console.error('Error accessing camera:', error);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  setupVideo();\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (video.value.srcObject) {\r\n    const tracks = video.value.srcObject.getTracks();\r\n    tracks.forEach((track) => track.stop());\r\n  }\r\n});\r\n\r\nconst startScanner = () => {\r\n  scanning = true;\r\n  scannerInterval = setInterval(scanQRCode, 1000);\r\n};\r\n\r\nconst stopScanner = () => {\r\n  scanning = false;\r\n  clearInterval(scannerInterval);\r\n};\r\n\r\nconst captureImage = () => {\r\n  if (scanning) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = video.value.videoWidth;\r\n    canvas.height = video.value.videoHeight;\r\n    const context = canvas.getContext('2d');\r\n    context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n\r\n    // ... (rest of your captureImage logic)\r\n  }\r\n};\r\n\r\nconst submitForm = () => {\r\n  // ... (rest of your submitForm logic)\r\n};\r\n\r\nconst scanQRCode = () => {\r\n  if (scanning && video.value) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = video.value.videoWidth;\r\n    canvas.height = video.value.videoHeight;\r\n    const context = canvas.getContext('2d');\r\n    context.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n\r\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n    const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\r\n    if (code) {\r\n      keyinfo_id.value = code.data;\r\n    }\r\n  }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}